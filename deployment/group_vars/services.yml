---
service_app_version: "2.0.b{{ build_number | default(0099) }}"
service_user: service_user
service_home: /opt/service

# run_JAR settings
run_path: TelemetryEventService-1.0.0/bin/TelemetryEventService

# Logstash settings
logstash_user: service_user
input_configs: |
 tcp {
    host => "0.0.0.0"
    port => 55505
  }
output_configs: |
  file {
    path => "/var/log/logstash/output.log"
  }
logstash_install_plugins:
  - logstash-input-tcp
  - logstash-output-s3
  - logstash-output-file

# Nginx settings
nginx_user: service_user

# NGINX Server Block configuraiton
nginx_server_blocks:
  - sbt: 'service.conf'
    serverblocks:
      - listen: 80 default_server
        server_name: "_"
        root: /usr/share/nginx/html
        return: 301 https://$host$request_uri
      - listen: 443 default_server ssl
        server_name: "_"
        root: "{{ service_home }}/frontend"
        extra_parameters: |
          add_header X-Frame-Options SAMEORIGIN;
          add_header X-Content-Type-Options nosniff;
          add_header X-XSS-Protection "1; mode=block";
          add_header Strict-Transport-Security "max-age=35; includeSubdomains;";
          ssl_certificate "{{ nginx_cert_dir }}/{{ nginx_cert_crt }}";
          ssl_certificate_key "{{ nginx_cert_dir }}/{{ nginx_cert_key }}";
          ssl_session_cache shared:SSL:50m;
          ssl_session_timeout "10m";
          ssl_dhparam "{{ nginx_cert_dhparam }}";
          ssl_prefer_server_ciphers on;
          ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
          ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
          resolver 8.8.8.8;
          ssl_stapling on;
          ssl_trusted_certificate "{{ nginx_cert_dir }}/{{ nginx_cert_crt }}";
          location / {
            proxy_pass http://localhost:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade'; 
            proxy_set_header Host $host; 
            proxy_cache_bypass $http_upgrade;
          }
